//=============================================================================
//
// CScene2Dクラス [CScene2D.cpp]
// Author : 野尻　尚希
//
//=============================================================================
//*****************************************************************************
// インクルード
//*****************************************************************************
#include "CScene2D.h"
#include "../RENDERER/CRenderer.h"
//*****************************************************************************
// コンストラクタ
//*****************************************************************************
CScene2D ::CScene2D(LPDIRECT3DDEVICE9 *pDevice, OBJTYPE objType):CScene(objType)
{
	m_pD3DDevice = pDevice;									// デバイスオブジェクト(描画に必要)
	m_pD3DVtxBuff = NULL;									// 頂点座標情報を格納する場所のアドレスを確保する場所
	m_pD3DTexBuff = NULL;									// テクスチャ情報を格納する場所のアドレスを確保する場所
	m_Pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);					// ポリゴンの中央の位置
	m_Rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);					// ポリゴンの回転
	m_fLength = 0.0f;										// ポリゴンの対角線の長さ
	m_fAngle = 0.0f;										// ポリゴンの対角線の角度
	m_AutoDraw = true;
}

//*****************************************************************************
// デストラクタ
//*****************************************************************************
CScene2D ::~CScene2D(void)
{
}

//*****************************************************************************
// 初期化関数
//*****************************************************************************
HRESULT CScene2D :: Init(D3DXVECTOR3& pos, float width, float height, TEXTURE_TYPE texType, int wblock, int hblock)
{
	VERTEX_2D *pVtx;
	
	// 中心からなので半分にしている
	m_fLength = sqrtf(((width * 0.5f) * (width * 0.5f)) + ((height * 0.5f) * (height * 0.5f)));

	// 原点の位置
	m_Pos = pos;
	
	// 対角線の角度
	m_fAngle = D3DX_PI * 0.25f;	// 45度がほしいので1/4にしている

	// 角度初期化
	m_Rot.z = 0.f;

	// 幅高さ設定
	m_fWidth = width;
	m_fHeight = height;

	// ポリゴンのメモリ確保
	if(FAILED((*m_pD3DDevice)->CreateVertexBuffer(sizeof(VERTEX_2D) * 4			// 四角形の頂点数だから * 4
												, D3DUSAGE_WRITEONLY			// 変えない
												, FVF_VERTEX_2D					// 使用する頂点フォーマット
												, D3DPOOL_MANAGED				// 変えない
												, &m_pD3DVtxBuff				// 格納する場所
												, NULL)))						// 変えない
	{
		return E_FAIL;															// メモリを確保できなかったらメインに返す
	}

	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);							// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	// 描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(m_Pos.x - m_fWidth * 0.5f		// 中心からの距離なので半分に
							, m_Pos.y - m_fHeight * 0.5f
							, 0.0f);
	pVtx[1].vtx = D3DXVECTOR3(m_Pos.x + m_fWidth * 0.5f
							, m_Pos.y - m_fHeight * 0.5f
							, 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(m_Pos.x - m_fWidth * 0.5f
							, m_Pos.y + m_fHeight * 0.5f
							, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(m_Pos.x + m_fWidth * 0.5f
							, m_Pos.y + m_fHeight * 0.5f
							, 0.0f);
	//--------------------------------------------------------------------------------
	// 中身は常に1.0f
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;
	//---------------------------------------------------------------------------------
	// 色と透明度の設定（テクスチャを張るのでポリゴンは白で）
	pVtx[0].diffuse = DEFAULT_POLYGON_COLOR;
	pVtx[1].diffuse = DEFAULT_POLYGON_COLOR;
	pVtx[2].diffuse = DEFAULT_POLYGON_COLOR;
	pVtx[3].diffuse = DEFAULT_POLYGON_COLOR;
	//--------------------------------------------------------------------------------
	// 使用したいテクスチャの座標
	pVtx[0].tex = D3DXVECTOR2(MIN_UV_VALUE, MIN_UV_VALUE);
	pVtx[1].tex = D3DXVECTOR2(MAX_UV_VALUE, MIN_UV_VALUE);
	pVtx[2].tex = D3DXVECTOR2(MIN_UV_VALUE, MAX_UV_VALUE);
	pVtx[3].tex = D3DXVECTOR2(MAX_UV_VALUE, MAX_UV_VALUE);
	//----------------------------------------------------------------------------------
	m_pD3DTexBuff = CTexture::GetTexture(texType);
	m_pD3DVtxBuff->Unlock();																	// ロックしたら必ずアンロック！！
	//********************************************************************************************************************

	return S_OK;
}

//*****************************************************************************
// 終了関数
//*****************************************************************************
void CScene2D ::Uninit(void)
{
	SAFE_RELEASE(m_pD3DVtxBuff);
	m_pD3DTexBuff = NULL;
	this->Release();
}

//*****************************************************************************
// 更新関数
//*****************************************************************************
void CScene2D ::Update(void)
{
}

//*****************************************************************************
// 描画関数
//*****************************************************************************
void CScene2D::DrawNormalRender(void)
{
	// 自動描画ONなら
	if(m_AutoDraw)
	{
		// ポリゴンの描画
		(*m_pD3DDevice)->SetStreamSource(0, m_pD3DVtxBuff, 0, sizeof(VERTEX_2D));	// (0,渡すものが入ってるやつ,0,データの型指定)
		(*m_pD3DDevice)->SetFVF(FVF_VERTEX_2D);									// 頂点フォーマットの設定
		(*m_pD3DDevice)->SetTexture(0, m_pD3DTexBuff);							// テクスチャの設定（２つ目の引数をNULLにするとテクスチャを描画しない
		(*m_pD3DDevice)->DrawPrimitive(D3DPT_TRIANGLESTRIP						// プリミティブの種類
									, 0											// 描画を開始する頂点番号
									, DRAW_SQUARE_PRINITIV_NUM);				// 書きたいポリゴン数
	}
}

//*****************************************************************************
// ポリゴンセット関数  更新で呼んだりする
//*****************************************************************************
void CScene2D :: SetVertexPolygon(void)
{
	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);							// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	// 描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(m_Pos.x + sinf(m_Rot.z - m_fAngle) * m_fLength
							, m_Pos.y - cosf(m_Rot.z - m_fAngle) * m_fLength
							, 0.0f);
	pVtx[1].vtx = D3DXVECTOR3(m_Pos.x + sinf(m_Rot.z + m_fAngle) * m_fLength
							, m_Pos.y - cosf(m_Rot.z + m_fAngle) * m_fLength
							, 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(m_Pos.x - sinf(m_Rot.z + m_fAngle) * m_fLength
							, m_Pos.y + cosf(m_Rot.z + m_fAngle) * m_fLength
							, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(m_Pos.x - sinf(m_Rot.z - m_fAngle) * m_fLength
							, m_Pos.y + cosf(m_Rot.z - m_fAngle) * m_fLength
							, 0.0f);
	m_pD3DVtxBuff->Unlock();		// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// 頂点変更
//*****************************************************************************
void CScene2D::SetVertexPolygon(D3DXVECTOR3 pos, float width, float height)
{
	m_Pos = pos;
	m_fWidth = width;
	m_fHeight = height;

	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	//描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(pos.x - width * 0.5f				// 中心からの距離なので半分に
		, pos.y - height * 0.5f
		, 0.0f);
	pVtx[1].vtx = D3DXVECTOR3(pos.x + width * 0.5f
		, pos.y - height * 0.5f
		, 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(pos.x - width * 0.5f
		, pos.y + height * 0.5f
		, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(pos.x + width * 0.5f
		, pos.y + height * 0.5f
		, 0.0f);
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// 右側の頂点座標を変更する
//*****************************************************************************
void CScene2D::SetVertexPolygonRight(float x)
{
	// 幅と座標の変更
	m_fWidth += x - m_Pos.x - m_fWidth * 0.5f;
	m_Pos.x = x - m_fWidth * 0.5f;

	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	//描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[1].vtx = D3DXVECTOR3(x, m_Pos.y - m_fHeight * 0.5f, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(x, m_Pos.y + m_fHeight * 0.5f, 0.0f);
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// 左側の頂点座標を変更する
//*****************************************************************************
void CScene2D::SetVertexPolygonLeft(float x)
{
	// 幅と座標の変更
	m_fWidth = m_Pos.x + (m_fWidth * 0.5f) - x;
	m_Pos.x = x + m_fWidth * 0.5f;

	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	//描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(x, m_Pos.y - m_fHeight * 0.5f , 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(x, m_Pos.y + m_fHeight * 0.5f , 0.0f);
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// ポリゴンカラーセット関数  更新で呼んだりする
//*****************************************************************************
void	CScene2D::SetColorPolygon(D3DXCOLOR color)
{
	VERTEX_2D	*pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	// 描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	// 色と透明度の設定（テクスチャを張るのでポリゴンは白で）
	pVtx[0].diffuse = color;
	pVtx[1].diffuse = color;
	pVtx[2].diffuse = color;
	pVtx[3].diffuse = color;
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// クリエイト関数
//*****************************************************************************
CScene2D* CScene2D::Create(LPDIRECT3DDEVICE9 *pDevice, D3DXVECTOR3& pos, float width, float height, TEXTURE_TYPE texType)
{
	// 作成
	CScene2D* p = new CScene2D(pDevice);

	// 初期化
	p->Init(pos, width, height, texType);

	return p;
}

//*****************************************************************************
// UVセット関数
//*****************************************************************************
void	CScene2D::SetUV(UV_INDEX *pUVIndex)
{
	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	//ポリゴンの設定
	m_pD3DVtxBuff->Lock(0,0,(void**)&pVtx,0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	
	pVtx[0].tex = D3DXVECTOR2(pUVIndex->left, pUVIndex->top);
	pVtx[1].tex = D3DXVECTOR2(pUVIndex->right, pUVIndex->top);
	pVtx[2].tex = D3DXVECTOR2(pUVIndex->left, pUVIndex->bottom);
	pVtx[3].tex = D3DXVECTOR2(pUVIndex->right, pUVIndex->bottom);
	
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// UV左右反転させる関数
//*****************************************************************************
void	CScene2D::SetUVMirror()
{
	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	//ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)

	float x0 = pVtx[0].tex.x;
	float x2 = pVtx[2].tex.x;

	pVtx[0].tex.x = pVtx[1].tex.x;
	pVtx[1].tex.x = x0;
	pVtx[2].tex.x = pVtx[3].tex.x;
	pVtx[3].tex.x = x2;

	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
}

//*****************************************************************************
// セット関数
//*****************************************************************************
void	CScene2D::SetPos(D3DXVECTOR3& pos)
{
	m_Pos = pos;
	if(m_pD3DVtxBuff == NULL)
	{
		return;
	}

	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);					// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	// 描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(m_Pos.x - m_fWidth * 0.5f		// 中心からの距離なので半分に
							, m_Pos.y - m_fHeight * 0.5f
							, 0.0f);
	pVtx[1].vtx = D3DXVECTOR3(m_Pos.x + m_fWidth * 0.5f
							, m_Pos.y - m_fHeight * 0.5f
							, 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(m_Pos.x - m_fWidth * 0.5f
							, m_Pos.y + m_fHeight * 0.5f
							, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(m_Pos.x + m_fWidth * 0.5f
							, m_Pos.y + m_fHeight * 0.5f
							, 0.0f);
	//--------------------------------------------------------------------------------
	m_pD3DVtxBuff->Unlock();									// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
};

//*****************************************************************************
// セット関数
//*****************************************************************************
void	CScene2D::SetRot(D3DXVECTOR3& rot)
{
	m_Rot = rot;
	if(m_pD3DVtxBuff == NULL)
	{
		return;
	}

	VERTEX_2D *pVtx;
	//********************************************************************************************************************
	// ポリゴンの設定
	m_pD3DVtxBuff->Lock(0, 0, (void**)&pVtx, 0);	// ロックしないと勝手に書き換わる場合がある(アンロックを忘れずに)
	//--------------------------------------------------------------------------------
	// 描画したい頂点座標の設定(座標はZ字またはN字順に設定する)
	pVtx[0].vtx = D3DXVECTOR3(m_Pos.x + sinf(m_Rot.z - m_fAngle) * m_fLength
							, m_Pos.y - cosf(m_Rot.z - m_fAngle) * m_fLength
							, 0.0f);
	pVtx[1].vtx = D3DXVECTOR3(m_Pos.x + sinf(m_Rot.z + m_fAngle) * m_fLength
							, m_Pos.y - cosf(m_Rot.z + m_fAngle) * m_fLength
							, 0.0f);
	pVtx[2].vtx = D3DXVECTOR3(m_Pos.x - sinf(m_Rot.z + m_fAngle) * m_fLength
							, m_Pos.y + cosf(m_Rot.z + m_fAngle) * m_fLength
							, 0.0f);
	pVtx[3].vtx = D3DXVECTOR3(m_Pos.x - sinf(m_Rot.z - m_fAngle) * m_fLength
							, m_Pos.y + cosf(m_Rot.z - m_fAngle) * m_fLength
							, 0.0f);
	//--------------------------------------------------------------------------------
	
	m_pD3DVtxBuff->Unlock();					// ロックしたら必ずアンロック！！
	//********************************************************************************************************************
};
//----EOF----