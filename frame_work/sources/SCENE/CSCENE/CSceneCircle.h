//=============================================================================
//
// CSceneCircleクラス [CSceneCircle.h]
// Author : 塚本俊彦
//
//=============================================================================
#ifndef _CSCENECIRCLE_H_
#define _CSCENECIRCLE_H_

//=============================================================================
// インクルード
//=============================================================================
#include "../../MAIN/main.h"
#include "CScene2D.h"

//=============================================================================
// 前方宣言
//=============================================================================
class CNumber;

//*****************************************************************************
// マクロ
//*****************************************************************************

//*****************************************************************************
// クラス定義
//*****************************************************************************
class CSceneCircle : public CScene2D
{
public:
	//======================================================
	// コンストラクタ
	// 引数: デバイス
	//======================================================
	CSceneCircle(LPDIRECT3DDEVICE9 *pDevice);

	// デストラクタ
	~CSceneCircle();

	//======================================================
	// 初期化
	// 引数: 中心座標、半径、テクスチャタイプ
	//======================================================
	HRESULT Init(D3DXVECTOR3 pos, float radius, D3DXCOLOR color);
	
	// 終了
	void Uninit(void);

	// 更新
	void Update(void);

	// 描画
	void Draw(void);
	
	//======================================================
	// クリエイト関数
	// 引数: デバイス　座標　半径　色　最大値
	// 戻り値: 作ったやつのアドレス
	//======================================================
	static CSceneCircle* Create(LPDIRECT3DDEVICE9 *pDevice, D3DXVECTOR3 pos, float radius, D3DXCOLOR color, float fMaxValue);

	// float型の数値を入れると最大値に応じて円の量を変更する
	void ChangeSize(float fValue);

	// 描画フラグ
	void SetDrawFlag(bool flg){
		m_bDraw = flg;
	}

private:
	// 頂点バッファの確保
	HRESULT CreateVertexBuff();
	// 頂点情報の初期化
	void SetVertexBuff();
	// 現在の角度で頂点バッファの値を更新（更新で呼ぶ）
	void SetVertexBuffVtx();
	// 最大値に対する数値の割合を最大値から計算
	void CalcRatio(float max);

	// デバイス
	LPDIRECT3DDEVICE9 *m_pD3DDevice;
	// 半径
	float m_fRadius;
	// 円の色
	D3DXCOLOR m_Color;
	// 現在の角度
	float m_fRad;
	// 最大値に対する数値の割合(ChangeSizeのfValue(1)当たりの角度)
	float m_fValueRaio;
	// 描画フラグ(CScene2Dの描画を使わないので自前)
	bool m_bDraw;
};
#endif
//----EOF----