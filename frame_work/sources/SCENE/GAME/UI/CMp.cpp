//=============================================================================
//
// CMpクラス [CMp.cpp]
// Author : 塚本　俊彦
//
//=============================================================================
//*****************************************************************************
// インクルード
//*****************************************************************************
#include "CMp.h"
#include "../../CSCENE/CSceneCircle.h"
#include "../../../MANAGER/CManager.h"

//*****************************************************************************
// 定数
//*****************************************************************************
// MPゲージをプレイヤの座標からどのくらい動かすか
static const D3DXVECTOR3 MP_POS_OFFSET = D3DXVECTOR3(0, -50, 0);
// MPゲージの半径
static const float MP_RADIUS = 20.0f;
// MPが点滅する間隔
static const short MP_FLASH_INTERVAL = 10;
// 現在MPが何パーセントで点滅するか
static const float MP_FLASH_RATIO = 0.3f;

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//*****************************************************************************
// コンストラクタ
//*****************************************************************************
CMp::CMp(LPDIRECT3DDEVICE9* pDevice)
{
	m_pDevice = pDevice;

}

//*****************************************************************************
// デストラクタ
//*****************************************************************************
CMp ::~CMp(void)
{
}

//*****************************************************************************
// 初期化
//*****************************************************************************
void CMp::Init(float fMpMax, short playerNum)
{
	if (playerNum < 0 || playerNum >= 4){
		return;
	}

	// 変数初期化
	m_bLow = false;
	m_nLowCount = 0;
	m_fMpMax = fMpMax;
	m_Color = PLAYER_COLOR[playerNum];
	
	// 円のポリゴン生成
	m_pCircle = CSceneCircle::Create(
		m_pDevice,
		m_vPos + MP_POS_OFFSET,
		MP_RADIUS,
		m_Color,
		m_fMpMax);
}

//*****************************************************************************
// 終了
//*****************************************************************************
void CMp::Uninit(void)
{
	
}

//*****************************************************************************
// 更新
//*****************************************************************************
void CMp::Update(D3DXVECTOR3 pos, float mp)
{
	// 値の更新
	m_pCircle->SetPos(pos + MP_POS_OFFSET);

	// MPとCircleを対応
	m_pCircle->ChangeSize(mp);

	// MPの状態によって描画切り替え
	UpdateDrawFlg(mp);
}

//-----------------------------------------------------------------------------
// 描画フラグの更新（Updateで呼ばれる）
//-----------------------------------------------------------------------------
void CMp::UpdateDrawFlg(float mp){

	// 描画フラグ
	bool bDrawFlg = true;

	// 一定割合少ない状態フラグか
	if (mp / m_fMpMax < MP_FLASH_RATIO){
		m_bLow = true;
	}
	else{
		m_bLow = false;
	}

	// 一定割合少ない状態
	if (m_bLow){
		m_nLowCount++;
		if (m_nLowCount > MP_FLASH_INTERVAL){
			bDrawFlg = false;
		}
		if (m_nLowCount > MP_FLASH_INTERVAL * 2){
			bDrawFlg = true;
			m_nLowCount = 0;
		}
	}

	// 満タンなら消す
	if (mp >= m_fMpMax){
		bDrawFlg = false;
	}

	// フラグをセット
	m_pCircle->CSceneCircle::SetDrawFlag(bDrawFlg);
}
//----EOF-------