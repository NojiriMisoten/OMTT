//=============================================================================
//
// CControllerManagerクラス [ CControllerManager.h]
// Author : 野尻　尚希
//
//=============================================================================
#ifndef _CCONTROLLER_MANAGER_H_
#define _CCONTROLLER_MANAGER_H_

//=============================================================================
// インクルード
//=============================================================================
#include "../INPUT/CInputGamePad.h"

//=============================================================================
// 前方宣言
//=============================================================================
class CController;

//=============================================================================
// クラス定義
//=============================================================================
class CControllerManager
{
public:
	//=============================================================================
	// マクロ
	//=============================================================================
	static const int MAX_CONTROLLER_NUM = 4;	// コントローラーの最大数

	// コンストラクタ
	CControllerManager(void);

	// デストラクタ
	~CControllerManager(void);

	// 終了
	static void Uninit(void);

	//======================================
	// クリエイト
	// 戻り値：コントローラーマネージャーのアドレス
	//======================================
	static CControllerManager* Create(void);

	//======================================
	// トリガーキー取得
	// 引数: 調べたいキー
	// 戻り値: 押されてるか
	//======================================
	static bool GetTriggerKey(CInputGamePad::KEY key, int ID);

	//======================================
	// プレスキー取得
	// 引数: 調べたいキー
	// 戻り値: 押された瞬間か
	//======================================
	static bool GetPressKey(CInputGamePad::KEY key, int ID);

	//======================================
	// リリースキー取得
	// 引数: 調べたいキー
	// 戻り値: 離された瞬間か
	//======================================
	static bool GetReleaseKey(CInputGamePad::KEY key, int ID);

	//======================================
	// リピートキー取得
	// 引数: 調べたいキー
	// 戻り値: 離された瞬間か
	//======================================
	static bool GetRepeatKey(CInputGamePad::KEY key, int ID);

	//======================================
	// キーコフィングファイルのセーブ
	// 引数: ファイルネーム
	//======================================
	static void SaveKeyCofingFile(void);

	//======================================
	// キーコフィングファイルのセット
	// 引数: コントローラー番号,どのボタンか、キーコード
	//======================================
	static void SetKeyCord(int ID, CInputGamePad::PAD_BUTTON key, int cord);

	//======================================
	// キーコフィング情報のゲット
	// 引数: コントローラー番号,どのボタンか
	// 戻り値: キーコード
	//======================================
	static int GetKeyCord(int ID, CInputGamePad::PAD_BUTTON key);

	//======================================
	// キーコフィング情報の更新
	//======================================
	static void UpdateKeyCord(void);

private:

	// 初期化
	static void Init(void);

	static CController* m_pController[MAX_CONTROLLER_NUM];		// コントローラー
};



#endif
//-----EOF-----